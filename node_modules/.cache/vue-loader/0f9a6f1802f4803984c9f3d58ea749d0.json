{"remainingRequest":"/Users/lianfangti/Project/UNI-APP/JIGE/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lianfangti/Project/UNI-APP/JIGE/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-scoped-loader/index.js!/Users/lianfangti/Project/UNI-APP/JIGE/src/pages/component/page/page.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lianfangti/Project/UNI-APP/JIGE/src/pages/component/page/page.vue","mtime":1568002261088},{"path":"/Users/lianfangti/Project/UNI-APP/JIGE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lianfangti/Project/UNI-APP/JIGE/node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lianfangti/Project/UNI-APP/JIGE/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js","mtime":499162500000},{"path":"/Users/lianfangti/Project/UNI-APP/JIGE/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js","mtime":499162500000},{"path":"/Users/lianfangti/Project/UNI-APP/JIGE/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lianfangti/Project/UNI-APP/JIGE/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lianfangti/Project/UNI-APP/JIGE/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-scoped-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    name: \"page\",\n    data() {\n        return {\n            StatusBar: this.StatusBar,\n            CustomBar: this.CustomBar,\n            CUR_MP:this.CUR_MP,\n            tabbarOptions: {},\n            stack: [],\n            pagecount: 0,\n\n        };\n    },\n\n    beforeMount() {\n        // console.log(`调试:beforeMount`);\n        let pages = getCurrentPages();\n        // console.log(`调试:`, pages);\n        this.pagecount = pages.length;\n        this.tabbarOptions = this.tabbar;\n\n\n        //   console.log(`调试:页面栈`, pages);\n        //\n        //   this.stack = pages;\n    },\n    methods: {\n        handleTabbarTap(item,index) {\n            // let {target: {dataset: {key, index}}} = e;\n            console.log(`调试:`,item);\n            let {key,type} = item;\n            if(type==='button'){\n                return 0;// 过滤类型为按钮的点击\n            }\n            index = parseInt(index);\n            this.tabbarOptions.index = index;\n            console.log(`调试:Tabbar`,this.tabbarOptions.pages[index])\n            this.$emit(\"onTabbarChange\", {key, index});\n            uni.vibrateShort();\n            // console.log(`调试:`, key)\n        },\n        handleTabbarActionTap(item) {\n            // console.log(`调试:Tabbar的Action按钮被点击`, e)\n            // item.loadding = !item.loadding ;\n            this.$emit('onTabbarActionTap', item);\n            uni.vibrateShort();\n\n        }\n    },\n    watch: {\n        'tabbar.pages': {\n            handler: function (val, newVal) {\n                console.log(`调试:监听到数据变化\\n`,JSON.stringify(val[1]), \"\\n\",JSON.stringify(newVal[1]))\n                this.tabbarOptions.pages = newVal;\n\n                // console.log(`调试:`, this.tabbar.pages)\n            },\n            deep: true\n        },\n        'tabbar': {\n            handler: function (val, newVal) {\n                console.log(`调试:监听到数据变化\\n`,JSON.stringify(val[1]), \"\\n\",JSON.stringify(newVal[1]))\n                this.tabbarOptions = newVal;\n\n                // console.log(`调试:`, this.tabbar.pages)\n            },\n            deep: true\n        }\n\n    },\n    props: {\n        title: {\n            type: String,\n            default: ''\n        },\n        isBack: {\n            type: Boolean,\n            default: false,\n        },\n        bgColor: {\n            type: String,\n            default: undefined\n        },\n        showTabbar: {\n            type: Boolean,\n            default: false\n        },\n        tabbar: {\n            type: Object,\n            default() {\n                return {\n                    index: 0,\n                    pages: [\n                        {\n                            key: 'home',\n                            title: '首页',\n                            type: 'page',\n                            icon: 'homefill',\n                        }, {\n                            key: 'scan',\n                            title: '扫码购物',\n                            type: 'button',\n                            icon: 'scan',\n                        }, {\n                            key: 'user',\n                            title: '我的',\n                            type: 'page',\n                            icon: 'myfill',\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n",{"version":3,"sources":["page.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"page.vue","sourceRoot":"src/pages/component/page","sourcesContent":["<template>\n    <view class=\"cu-page text-sm\">\n        <cu-custom bg-color=\"#387AFF\" title-color=\"white\"  :isBack=\"pagecount> 1\" v-if=\"CUR_MP==='mp-weixin'\">\n            <block slot=\"content\">{{title ||tabbarOptions.pages[tabbarOptions.index].title}}</block>\n        </cu-custom>\n        <view class=\"page-content \" :style=\"{height:'calc(100vh - ' + CustomBar + 'px)',backgroundColor:bgColor || ''}\">\n            <slot></slot>\n        </view>\n        <view v-if=\"showTabbar\" class=\"footer\">\n            <view class=\"cu-bar tabbar  \" style=\"background:#F7F7FA;\">\n\n                <view\n                        v-for=\"(item,index) in tabbarOptions.pages\"\n                        :key=\"index\"\n                        class=\"action \"\n                        :class=\"(index  === tabbarOptions.index ? 'text-blue' : 'text-gray') + ' '+(item.type === 'button' ? 'add-action' : '')\"\n                        @tap=\"handleTabbarTap(item,index)\"\n                >\n                    <button v-if=\"item.type==='button'\" class='cu-btn bg-blue shadow'\n                            :class=\"item.loadding ? 'cuIcon-loading animation-rotate' : item.icon\"\n                            @tap=\"handleTabbarActionTap(item)\"></button>\n                    <view v-else :class='\"cuIcon-\"+item.icon' :data-key=\"item.key\" :data-index=\"index\"\n                    ></view>\n                    {{item.title}}\n                </view>\n            </view>\n        </view>\n    </view>\n</template>\n\n<script>\n    export default {\n        name: \"page\",\n        data() {\n            return {\n                StatusBar: this.StatusBar,\n                CustomBar: this.CustomBar,\n                CUR_MP:this.CUR_MP,\n                tabbarOptions: {},\n                stack: [],\n                pagecount: 0,\n\n            };\n        },\n\n        beforeMount() {\n            // console.log(`调试:beforeMount`);\n            let pages = getCurrentPages();\n            // console.log(`调试:`, pages);\n            this.pagecount = pages.length;\n            this.tabbarOptions = this.tabbar;\n\n\n            //   console.log(`调试:页面栈`, pages);\n            //\n            //   this.stack = pages;\n        },\n        methods: {\n            handleTabbarTap(item,index) {\n                // let {target: {dataset: {key, index}}} = e;\n                console.log(`调试:`,item);\n                let {key,type} = item;\n                if(type==='button'){\n                    return 0;// 过滤类型为按钮的点击\n                }\n                index = parseInt(index);\n                this.tabbarOptions.index = index;\n                console.log(`调试:Tabbar`,this.tabbarOptions.pages[index])\n                this.$emit(\"onTabbarChange\", {key, index});\n                uni.vibrateShort();\n                // console.log(`调试:`, key)\n            },\n            handleTabbarActionTap(item) {\n                // console.log(`调试:Tabbar的Action按钮被点击`, e)\n                // item.loadding = !item.loadding ;\n                this.$emit('onTabbarActionTap', item);\n                uni.vibrateShort();\n\n            }\n        },\n        watch: {\n            'tabbar.pages': {\n                handler: function (val, newVal) {\n                    console.log(`调试:监听到数据变化\\n`,JSON.stringify(val[1]), \"\\n\",JSON.stringify(newVal[1]))\n                    this.tabbarOptions.pages = newVal;\n\n                    // console.log(`调试:`, this.tabbar.pages)\n                },\n                deep: true\n            },\n            'tabbar': {\n                handler: function (val, newVal) {\n                    console.log(`调试:监听到数据变化\\n`,JSON.stringify(val[1]), \"\\n\",JSON.stringify(newVal[1]))\n                    this.tabbarOptions = newVal;\n\n                    // console.log(`调试:`, this.tabbar.pages)\n                },\n                deep: true\n            }\n\n        },\n        props: {\n            title: {\n                type: String,\n                default: ''\n            },\n            isBack: {\n                type: Boolean,\n                default: false,\n            },\n            bgColor: {\n                type: String,\n                default: undefined\n            },\n            showTabbar: {\n                type: Boolean,\n                default: false\n            },\n            tabbar: {\n                type: Object,\n                default() {\n                    return {\n                        index: 0,\n                        pages: [\n                            {\n                                key: 'home',\n                                title: '首页',\n                                type: 'page',\n                                icon: 'homefill',\n                            }, {\n                                key: 'scan',\n                                title: '扫码购物',\n                                type: 'button',\n                                icon: 'scan',\n                            }, {\n                                key: 'user',\n                                title: '我的',\n                                type: 'page',\n                                icon: 'myfill',\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped scoped>\n    .page-content {\n        /*overflow-y: scroll;*/\n    }\n\n    .footer {\n        position: fixed;\n        bottom: 0px;\n        width: 100%;\n        z-index: 999;\n\n    }\n\n    .add-action::after {\n        box-shadow: none;\n    }\n\n    .animation-rotate {\n        -webkit-animation: rotate .8s linear infinite;\n    }\n\n    @-webkit-keyframes rotate {\n\n        0% {\n            -webkit-transform: rotate(0deg);\n        }\n\n        100% {\n            -webkit-transform: rotate(360deg);\n        }\n\n    }\n</style>\n"]}]}